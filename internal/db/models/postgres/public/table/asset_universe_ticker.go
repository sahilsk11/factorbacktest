//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AssetUniverseTicker = newAssetUniverseTickerTable("public", "asset_universe_ticker", "")

type assetUniverseTickerTable struct {
	postgres.Table

	//Columns
	AssetUniverseTicker postgres.ColumnString
	TickerID            postgres.ColumnString
	AssetUniverseID     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AssetUniverseTickerTable struct {
	assetUniverseTickerTable

	EXCLUDED assetUniverseTickerTable
}

// AS creates new AssetUniverseTickerTable with assigned alias
func (a AssetUniverseTickerTable) AS(alias string) *AssetUniverseTickerTable {
	return newAssetUniverseTickerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AssetUniverseTickerTable with assigned schema name
func (a AssetUniverseTickerTable) FromSchema(schemaName string) *AssetUniverseTickerTable {
	return newAssetUniverseTickerTable(schemaName, a.TableName(), a.Alias())
}

func newAssetUniverseTickerTable(schemaName, tableName, alias string) *AssetUniverseTickerTable {
	return &AssetUniverseTickerTable{
		assetUniverseTickerTable: newAssetUniverseTickerTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newAssetUniverseTickerTableImpl("", "excluded", ""),
	}
}

func newAssetUniverseTickerTableImpl(schemaName, tableName, alias string) assetUniverseTickerTable {
	var (
		AssetUniverseTickerColumn = postgres.StringColumn("asset_universe_ticker")
		TickerIDColumn            = postgres.StringColumn("ticker_id")
		AssetUniverseIDColumn     = postgres.StringColumn("asset_universe_id")
		allColumns                = postgres.ColumnList{AssetUniverseTickerColumn, TickerIDColumn, AssetUniverseIDColumn}
		mutableColumns            = postgres.ColumnList{TickerIDColumn, AssetUniverseIDColumn}
	)

	return assetUniverseTickerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AssetUniverseTicker: AssetUniverseTickerColumn,
		TickerID:            TickerIDColumn,
		AssetUniverseID:     AssetUniverseIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
