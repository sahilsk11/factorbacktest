//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ContactMessage = newContactMessageTable("public", "contact_message", "")

type contactMessageTable struct {
	postgres.Table

	//Columns
	MessageID      postgres.ColumnString
	UserID         postgres.ColumnString
	ReplyEmail     postgres.ColumnString
	MessageContent postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ContactMessageTable struct {
	contactMessageTable

	EXCLUDED contactMessageTable
}

// AS creates new ContactMessageTable with assigned alias
func (a ContactMessageTable) AS(alias string) *ContactMessageTable {
	return newContactMessageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ContactMessageTable with assigned schema name
func (a ContactMessageTable) FromSchema(schemaName string) *ContactMessageTable {
	return newContactMessageTable(schemaName, a.TableName(), a.Alias())
}

func newContactMessageTable(schemaName, tableName, alias string) *ContactMessageTable {
	return &ContactMessageTable{
		contactMessageTable: newContactMessageTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newContactMessageTableImpl("", "excluded", ""),
	}
}

func newContactMessageTableImpl(schemaName, tableName, alias string) contactMessageTable {
	var (
		MessageIDColumn      = postgres.StringColumn("message_id")
		UserIDColumn         = postgres.StringColumn("user_id")
		ReplyEmailColumn     = postgres.StringColumn("reply_email")
		MessageContentColumn = postgres.StringColumn("message_content")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		allColumns           = postgres.ColumnList{MessageIDColumn, UserIDColumn, ReplyEmailColumn, MessageContentColumn, CreatedAtColumn}
		mutableColumns       = postgres.ColumnList{UserIDColumn, ReplyEmailColumn, MessageContentColumn, CreatedAtColumn}
	)

	return contactMessageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		MessageID:      MessageIDColumn,
		UserID:         UserIDColumn,
		ReplyEmail:     ReplyEmailColumn,
		MessageContent: MessageContentColumn,
		CreatedAt:      CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
