//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PublishedStrategy = newPublishedStrategyTable("public", "published_strategy", "")

type publishedStrategyTable struct {
	postgres.Table

	//Columns
	PublishedStrategyID postgres.ColumnString
	StrategyName        postgres.ColumnString
	FactorExpression    postgres.ColumnString
	RebalanceInterval   postgres.ColumnString
	NumAssets           postgres.ColumnInteger
	AssetUniverse       postgres.ColumnString
	CreatorAccountID    postgres.ColumnString
	CreatedAt           postgres.ColumnTimestampz
	ModifiedAt          postgres.ColumnTimestampz
	DeletedAt           postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PublishedStrategyTable struct {
	publishedStrategyTable

	EXCLUDED publishedStrategyTable
}

// AS creates new PublishedStrategyTable with assigned alias
func (a PublishedStrategyTable) AS(alias string) *PublishedStrategyTable {
	return newPublishedStrategyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PublishedStrategyTable with assigned schema name
func (a PublishedStrategyTable) FromSchema(schemaName string) *PublishedStrategyTable {
	return newPublishedStrategyTable(schemaName, a.TableName(), a.Alias())
}

func newPublishedStrategyTable(schemaName, tableName, alias string) *PublishedStrategyTable {
	return &PublishedStrategyTable{
		publishedStrategyTable: newPublishedStrategyTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newPublishedStrategyTableImpl("", "excluded", ""),
	}
}

func newPublishedStrategyTableImpl(schemaName, tableName, alias string) publishedStrategyTable {
	var (
		PublishedStrategyIDColumn = postgres.StringColumn("published_strategy_id")
		StrategyNameColumn        = postgres.StringColumn("strategy_name")
		FactorExpressionColumn    = postgres.StringColumn("factor_expression")
		RebalanceIntervalColumn   = postgres.StringColumn("rebalance_interval")
		NumAssetsColumn           = postgres.IntegerColumn("num_assets")
		AssetUniverseColumn       = postgres.StringColumn("asset_universe")
		CreatorAccountIDColumn    = postgres.StringColumn("creator_account_id")
		CreatedAtColumn           = postgres.TimestampzColumn("created_at")
		ModifiedAtColumn          = postgres.TimestampzColumn("modified_at")
		DeletedAtColumn           = postgres.TimestampzColumn("deleted_at")
		allColumns                = postgres.ColumnList{PublishedStrategyIDColumn, StrategyNameColumn, FactorExpressionColumn, RebalanceIntervalColumn, NumAssetsColumn, AssetUniverseColumn, CreatorAccountIDColumn, CreatedAtColumn, ModifiedAtColumn, DeletedAtColumn}
		mutableColumns            = postgres.ColumnList{StrategyNameColumn, FactorExpressionColumn, RebalanceIntervalColumn, NumAssetsColumn, AssetUniverseColumn, CreatorAccountIDColumn, CreatedAtColumn, ModifiedAtColumn, DeletedAtColumn}
	)

	return publishedStrategyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PublishedStrategyID: PublishedStrategyIDColumn,
		StrategyName:        StrategyNameColumn,
		FactorExpression:    FactorExpressionColumn,
		RebalanceInterval:   RebalanceIntervalColumn,
		NumAssets:           NumAssetsColumn,
		AssetUniverse:       AssetUniverseColumn,
		CreatorAccountID:    CreatorAccountIDColumn,
		CreatedAt:           CreatedAtColumn,
		ModifiedAt:          ModifiedAtColumn,
		DeletedAt:           DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
