//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PublishedStrategyStats = newPublishedStrategyStatsTable("public", "published_strategy_stats", "")

type publishedStrategyStatsTable struct {
	postgres.Table

	//Columns
	PublishedStrategyStatsID postgres.ColumnString
	PublishedStrategyID      postgres.ColumnString
	OneYearReturn            postgres.ColumnFloat
	TwoYearReturn            postgres.ColumnFloat
	FiveYearReturn           postgres.ColumnFloat
	Diversification          postgres.ColumnFloat
	SharpeRatio              postgres.ColumnFloat
	CreatedAt                postgres.ColumnTimestampz
	AnnualizedReturn         postgres.ColumnFloat
	AnnualizedStdev          postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PublishedStrategyStatsTable struct {
	publishedStrategyStatsTable

	EXCLUDED publishedStrategyStatsTable
}

// AS creates new PublishedStrategyStatsTable with assigned alias
func (a PublishedStrategyStatsTable) AS(alias string) *PublishedStrategyStatsTable {
	return newPublishedStrategyStatsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PublishedStrategyStatsTable with assigned schema name
func (a PublishedStrategyStatsTable) FromSchema(schemaName string) *PublishedStrategyStatsTable {
	return newPublishedStrategyStatsTable(schemaName, a.TableName(), a.Alias())
}

func newPublishedStrategyStatsTable(schemaName, tableName, alias string) *PublishedStrategyStatsTable {
	return &PublishedStrategyStatsTable{
		publishedStrategyStatsTable: newPublishedStrategyStatsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newPublishedStrategyStatsTableImpl("", "excluded", ""),
	}
}

func newPublishedStrategyStatsTableImpl(schemaName, tableName, alias string) publishedStrategyStatsTable {
	var (
		PublishedStrategyStatsIDColumn = postgres.StringColumn("published_strategy_stats_id")
		PublishedStrategyIDColumn      = postgres.StringColumn("published_strategy_id")
		OneYearReturnColumn            = postgres.FloatColumn("one_year_return")
		TwoYearReturnColumn            = postgres.FloatColumn("two_year_return")
		FiveYearReturnColumn           = postgres.FloatColumn("five_year_return")
		DiversificationColumn          = postgres.FloatColumn("diversification")
		SharpeRatioColumn              = postgres.FloatColumn("sharpe_ratio")
		CreatedAtColumn                = postgres.TimestampzColumn("created_at")
		AnnualizedReturnColumn         = postgres.FloatColumn("annualized_return")
		AnnualizedStdevColumn          = postgres.FloatColumn("annualized_stdev")
		allColumns                     = postgres.ColumnList{PublishedStrategyStatsIDColumn, PublishedStrategyIDColumn, OneYearReturnColumn, TwoYearReturnColumn, FiveYearReturnColumn, DiversificationColumn, SharpeRatioColumn, CreatedAtColumn, AnnualizedReturnColumn, AnnualizedStdevColumn}
		mutableColumns                 = postgres.ColumnList{PublishedStrategyIDColumn, OneYearReturnColumn, TwoYearReturnColumn, FiveYearReturnColumn, DiversificationColumn, SharpeRatioColumn, CreatedAtColumn, AnnualizedReturnColumn, AnnualizedStdevColumn}
	)

	return publishedStrategyStatsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PublishedStrategyStatsID: PublishedStrategyStatsIDColumn,
		PublishedStrategyID:      PublishedStrategyIDColumn,
		OneYearReturn:            OneYearReturnColumn,
		TwoYearReturn:            TwoYearReturnColumn,
		FiveYearReturn:           FiveYearReturnColumn,
		Diversification:          DiversificationColumn,
		SharpeRatio:              SharpeRatioColumn,
		CreatedAt:                CreatedAtColumn,
		AnnualizedReturn:         AnnualizedReturnColumn,
		AnnualizedStdev:          AnnualizedStdevColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
