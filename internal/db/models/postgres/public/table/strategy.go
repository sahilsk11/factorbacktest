//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Strategy = newStrategyTable("public", "strategy", "")

type strategyTable struct {
	postgres.Table

	//Columns
	StrategyID        postgres.ColumnString
	StrategyName      postgres.ColumnString
	FactorExpression  postgres.ColumnString
	RebalanceInterval postgres.ColumnString
	NumAssets         postgres.ColumnInteger
	AssetUniverse     postgres.ColumnString
	UserAccountID     postgres.ColumnString
	CreatedAt         postgres.ColumnTimestampz
	ModifiedAt        postgres.ColumnTimestampz
	Published         postgres.ColumnBool
	Saved             postgres.ColumnBool
	Description       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StrategyTable struct {
	strategyTable

	EXCLUDED strategyTable
}

// AS creates new StrategyTable with assigned alias
func (a StrategyTable) AS(alias string) *StrategyTable {
	return newStrategyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StrategyTable with assigned schema name
func (a StrategyTable) FromSchema(schemaName string) *StrategyTable {
	return newStrategyTable(schemaName, a.TableName(), a.Alias())
}

func newStrategyTable(schemaName, tableName, alias string) *StrategyTable {
	return &StrategyTable{
		strategyTable: newStrategyTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newStrategyTableImpl("", "excluded", ""),
	}
}

func newStrategyTableImpl(schemaName, tableName, alias string) strategyTable {
	var (
		StrategyIDColumn        = postgres.StringColumn("strategy_id")
		StrategyNameColumn      = postgres.StringColumn("strategy_name")
		FactorExpressionColumn  = postgres.StringColumn("factor_expression")
		RebalanceIntervalColumn = postgres.StringColumn("rebalance_interval")
		NumAssetsColumn         = postgres.IntegerColumn("num_assets")
		AssetUniverseColumn     = postgres.StringColumn("asset_universe")
		UserAccountIDColumn     = postgres.StringColumn("user_account_id")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		ModifiedAtColumn        = postgres.TimestampzColumn("modified_at")
		PublishedColumn         = postgres.BoolColumn("published")
		SavedColumn             = postgres.BoolColumn("saved")
		DescriptionColumn       = postgres.StringColumn("description")
		allColumns              = postgres.ColumnList{StrategyIDColumn, StrategyNameColumn, FactorExpressionColumn, RebalanceIntervalColumn, NumAssetsColumn, AssetUniverseColumn, UserAccountIDColumn, CreatedAtColumn, ModifiedAtColumn, PublishedColumn, SavedColumn, DescriptionColumn}
		mutableColumns          = postgres.ColumnList{StrategyNameColumn, FactorExpressionColumn, RebalanceIntervalColumn, NumAssetsColumn, AssetUniverseColumn, UserAccountIDColumn, CreatedAtColumn, ModifiedAtColumn, PublishedColumn, SavedColumn, DescriptionColumn}
	)

	return strategyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		StrategyID:        StrategyIDColumn,
		StrategyName:      StrategyNameColumn,
		FactorExpression:  FactorExpressionColumn,
		RebalanceInterval: RebalanceIntervalColumn,
		NumAssets:         NumAssetsColumn,
		AssetUniverse:     AssetUniverseColumn,
		UserAccountID:     UserAccountIDColumn,
		CreatedAt:         CreatedAtColumn,
		ModifiedAt:        ModifiedAtColumn,
		Published:         PublishedColumn,
		Saved:             SavedColumn,
		Description:       DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
