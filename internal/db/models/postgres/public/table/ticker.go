//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Ticker = newTickerTable("public", "ticker", "")

type tickerTable struct {
	postgres.Table

	//Columns
	Symbol   postgres.ColumnString
	Name     postgres.ColumnString
	TickerID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TickerTable struct {
	tickerTable

	EXCLUDED tickerTable
}

// AS creates new TickerTable with assigned alias
func (a TickerTable) AS(alias string) *TickerTable {
	return newTickerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TickerTable with assigned schema name
func (a TickerTable) FromSchema(schemaName string) *TickerTable {
	return newTickerTable(schemaName, a.TableName(), a.Alias())
}

func newTickerTable(schemaName, tableName, alias string) *TickerTable {
	return &TickerTable{
		tickerTable: newTickerTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newTickerTableImpl("", "excluded", ""),
	}
}

func newTickerTableImpl(schemaName, tableName, alias string) tickerTable {
	var (
		SymbolColumn   = postgres.StringColumn("symbol")
		NameColumn     = postgres.StringColumn("name")
		TickerIDColumn = postgres.StringColumn("ticker_id")
		allColumns     = postgres.ColumnList{SymbolColumn, NameColumn, TickerIDColumn}
		mutableColumns = postgres.ColumnList{SymbolColumn, NameColumn}
	)

	return tickerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Symbol:   SymbolColumn,
		Name:     NameColumn,
		TickerID: TickerIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
