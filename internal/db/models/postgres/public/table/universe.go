//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Universe = newUniverseTable("public", "universe", "")

type universeTable struct {
	postgres.Table

	//Columns
	ID     postgres.ColumnInteger
	Symbol postgres.ColumnString
	Name   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UniverseTable struct {
	universeTable

	EXCLUDED universeTable
}

// AS creates new UniverseTable with assigned alias
func (a UniverseTable) AS(alias string) *UniverseTable {
	return newUniverseTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UniverseTable with assigned schema name
func (a UniverseTable) FromSchema(schemaName string) *UniverseTable {
	return newUniverseTable(schemaName, a.TableName(), a.Alias())
}

func newUniverseTable(schemaName, tableName, alias string) *UniverseTable {
	return &UniverseTable{
		universeTable: newUniverseTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newUniverseTableImpl("", "excluded", ""),
	}
}

func newUniverseTableImpl(schemaName, tableName, alias string) universeTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		SymbolColumn   = postgres.StringColumn("symbol")
		NameColumn     = postgres.StringColumn("name")
		allColumns     = postgres.ColumnList{IDColumn, SymbolColumn, NameColumn}
		mutableColumns = postgres.ColumnList{SymbolColumn, NameColumn}
	)

	return universeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Symbol: SymbolColumn,
		Name:   NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
