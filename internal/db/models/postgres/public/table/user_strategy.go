//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserStrategy = newUserStrategyTable("public", "user_strategy", "")

type userStrategyTable struct {
	postgres.Table

	//Columns
	UserStrategyID       postgres.ColumnString
	UserID               postgres.ColumnString
	StrategyInput        postgres.ColumnString
	FactorExpressionHash postgres.ColumnString
	StrategyInputHash    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserStrategyTable struct {
	userStrategyTable

	EXCLUDED userStrategyTable
}

// AS creates new UserStrategyTable with assigned alias
func (a UserStrategyTable) AS(alias string) *UserStrategyTable {
	return newUserStrategyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserStrategyTable with assigned schema name
func (a UserStrategyTable) FromSchema(schemaName string) *UserStrategyTable {
	return newUserStrategyTable(schemaName, a.TableName(), a.Alias())
}

func newUserStrategyTable(schemaName, tableName, alias string) *UserStrategyTable {
	return &UserStrategyTable{
		userStrategyTable: newUserStrategyTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newUserStrategyTableImpl("", "excluded", ""),
	}
}

func newUserStrategyTableImpl(schemaName, tableName, alias string) userStrategyTable {
	var (
		UserStrategyIDColumn       = postgres.StringColumn("user_strategy_id")
		UserIDColumn               = postgres.StringColumn("user_id")
		StrategyInputColumn        = postgres.StringColumn("strategy_input")
		FactorExpressionHashColumn = postgres.StringColumn("factor_expression_hash")
		StrategyInputHashColumn    = postgres.StringColumn("strategy_input_hash")
		allColumns                 = postgres.ColumnList{UserStrategyIDColumn, UserIDColumn, StrategyInputColumn, FactorExpressionHashColumn, StrategyInputHashColumn}
		mutableColumns             = postgres.ColumnList{UserIDColumn, StrategyInputColumn, FactorExpressionHashColumn, StrategyInputHashColumn}
	)

	return userStrategyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserStrategyID:       UserStrategyIDColumn,
		UserID:               UserIDColumn,
		StrategyInput:        StrategyInputColumn,
		FactorExpressionHash: FactorExpressionHashColumn,
		StrategyInputHash:    StrategyInputHashColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
