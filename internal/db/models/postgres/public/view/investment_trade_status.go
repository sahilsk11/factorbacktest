//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var InvestmentTradeStatus = newInvestmentTradeStatusTable("public", "investment_trade_status", "")

type investmentTradeStatusTable struct {
	postgres.Table

	//Columns
	InvestmentTradeID postgres.ColumnString
	Side              postgres.ColumnString
	Symbol            postgres.ColumnString
	Status            postgres.ColumnString
	Quantity          postgres.ColumnFloat
	FilledPrice       postgres.ColumnFloat
	FilledAmount      postgres.ColumnFloat
	FilledAt          postgres.ColumnTimestampz
	RebalancerRunID   postgres.ColumnString
	InvestmentID      postgres.ColumnString
	TradeOrderID      postgres.ColumnString
	TickerID          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InvestmentTradeStatusTable struct {
	investmentTradeStatusTable

	EXCLUDED investmentTradeStatusTable
}

// AS creates new InvestmentTradeStatusTable with assigned alias
func (a InvestmentTradeStatusTable) AS(alias string) *InvestmentTradeStatusTable {
	return newInvestmentTradeStatusTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InvestmentTradeStatusTable with assigned schema name
func (a InvestmentTradeStatusTable) FromSchema(schemaName string) *InvestmentTradeStatusTable {
	return newInvestmentTradeStatusTable(schemaName, a.TableName(), a.Alias())
}

func newInvestmentTradeStatusTable(schemaName, tableName, alias string) *InvestmentTradeStatusTable {
	return &InvestmentTradeStatusTable{
		investmentTradeStatusTable: newInvestmentTradeStatusTableImpl(schemaName, tableName, alias),
		EXCLUDED:                   newInvestmentTradeStatusTableImpl("", "excluded", ""),
	}
}

func newInvestmentTradeStatusTableImpl(schemaName, tableName, alias string) investmentTradeStatusTable {
	var (
		InvestmentTradeIDColumn = postgres.StringColumn("investment_trade_id")
		SideColumn              = postgres.StringColumn("side")
		SymbolColumn            = postgres.StringColumn("symbol")
		StatusColumn            = postgres.StringColumn("status")
		QuantityColumn          = postgres.FloatColumn("quantity")
		FilledPriceColumn       = postgres.FloatColumn("filled_price")
		FilledAmountColumn      = postgres.FloatColumn("filled_amount")
		FilledAtColumn          = postgres.TimestampzColumn("filled_at")
		RebalancerRunIDColumn   = postgres.StringColumn("rebalancer_run_id")
		InvestmentIDColumn      = postgres.StringColumn("investment_id")
		TradeOrderIDColumn      = postgres.StringColumn("trade_order_id")
		TickerIDColumn          = postgres.StringColumn("ticker_id")
		allColumns              = postgres.ColumnList{InvestmentTradeIDColumn, SideColumn, SymbolColumn, StatusColumn, QuantityColumn, FilledPriceColumn, FilledAmountColumn, FilledAtColumn, RebalancerRunIDColumn, InvestmentIDColumn, TradeOrderIDColumn, TickerIDColumn}
		mutableColumns          = postgres.ColumnList{InvestmentTradeIDColumn, SideColumn, SymbolColumn, StatusColumn, QuantityColumn, FilledPriceColumn, FilledAmountColumn, FilledAtColumn, RebalancerRunIDColumn, InvestmentIDColumn, TradeOrderIDColumn, TickerIDColumn}
	)

	return investmentTradeStatusTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		InvestmentTradeID: InvestmentTradeIDColumn,
		Side:              SideColumn,
		Symbol:            SymbolColumn,
		Status:            StatusColumn,
		Quantity:          QuantityColumn,
		FilledPrice:       FilledPriceColumn,
		FilledAmount:      FilledAmountColumn,
		FilledAt:          FilledAtColumn,
		RebalancerRunID:   RebalancerRunIDColumn,
		InvestmentID:      InvestmentIDColumn,
		TradeOrderID:      TradeOrderIDColumn,
		TickerID:          TickerIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
