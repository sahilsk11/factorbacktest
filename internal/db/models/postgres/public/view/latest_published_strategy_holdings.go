//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LatestPublishedStrategyHoldings = newLatestPublishedStrategyHoldingsTable("public", "latest_published_strategy_holdings", "")

type latestPublishedStrategyHoldingsTable struct {
	postgres.Table

	//Columns
	PublishedStrategyHoldingsID        postgres.ColumnString
	PublishedStrategyID                postgres.ColumnString
	TickerID                           postgres.ColumnString
	Symbol                             postgres.ColumnString
	Quantity                           postgres.ColumnFloat
	CreatedAt                          postgres.ColumnTimestampz
	PublishedStrategyHoldingsVersionID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LatestPublishedStrategyHoldingsTable struct {
	latestPublishedStrategyHoldingsTable

	EXCLUDED latestPublishedStrategyHoldingsTable
}

// AS creates new LatestPublishedStrategyHoldingsTable with assigned alias
func (a LatestPublishedStrategyHoldingsTable) AS(alias string) *LatestPublishedStrategyHoldingsTable {
	return newLatestPublishedStrategyHoldingsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LatestPublishedStrategyHoldingsTable with assigned schema name
func (a LatestPublishedStrategyHoldingsTable) FromSchema(schemaName string) *LatestPublishedStrategyHoldingsTable {
	return newLatestPublishedStrategyHoldingsTable(schemaName, a.TableName(), a.Alias())
}

func newLatestPublishedStrategyHoldingsTable(schemaName, tableName, alias string) *LatestPublishedStrategyHoldingsTable {
	return &LatestPublishedStrategyHoldingsTable{
		latestPublishedStrategyHoldingsTable: newLatestPublishedStrategyHoldingsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                             newLatestPublishedStrategyHoldingsTableImpl("", "excluded", ""),
	}
}

func newLatestPublishedStrategyHoldingsTableImpl(schemaName, tableName, alias string) latestPublishedStrategyHoldingsTable {
	var (
		PublishedStrategyHoldingsIDColumn        = postgres.StringColumn("published_strategy_holdings_id")
		PublishedStrategyIDColumn                = postgres.StringColumn("published_strategy_id")
		TickerIDColumn                           = postgres.StringColumn("ticker_id")
		SymbolColumn                             = postgres.StringColumn("symbol")
		QuantityColumn                           = postgres.FloatColumn("quantity")
		CreatedAtColumn                          = postgres.TimestampzColumn("created_at")
		PublishedStrategyHoldingsVersionIDColumn = postgres.StringColumn("published_strategy_holdings_version_id")
		allColumns                               = postgres.ColumnList{PublishedStrategyHoldingsIDColumn, PublishedStrategyIDColumn, TickerIDColumn, SymbolColumn, QuantityColumn, CreatedAtColumn, PublishedStrategyHoldingsVersionIDColumn}
		mutableColumns                           = postgres.ColumnList{PublishedStrategyHoldingsIDColumn, PublishedStrategyIDColumn, TickerIDColumn, SymbolColumn, QuantityColumn, CreatedAtColumn, PublishedStrategyHoldingsVersionIDColumn}
	)

	return latestPublishedStrategyHoldingsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PublishedStrategyHoldingsID:        PublishedStrategyHoldingsIDColumn,
		PublishedStrategyID:                PublishedStrategyIDColumn,
		TickerID:                           TickerIDColumn,
		Symbol:                             SymbolColumn,
		Quantity:                           QuantityColumn,
		CreatedAt:                          CreatedAtColumn,
		PublishedStrategyHoldingsVersionID: PublishedStrategyHoldingsVersionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
