// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/adj_price.repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/adj_price.repository.go -destination=internal/repository/mocks/mock_adj_price.repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	sql "database/sql"
	model "factorbacktest/internal/db/models/postgres/public/model"
	domain "factorbacktest/internal/domain"
	repository "factorbacktest/internal/repository"
	reflect "reflect"
	time "time"

	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockAdjustedPriceRepository is a mock of AdjustedPriceRepository interface.
type MockAdjustedPriceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdjustedPriceRepositoryMockRecorder
}

// MockAdjustedPriceRepositoryMockRecorder is the mock recorder for MockAdjustedPriceRepository.
type MockAdjustedPriceRepositoryMockRecorder struct {
	mock *MockAdjustedPriceRepository
}

// NewMockAdjustedPriceRepository creates a new mock instance.
func NewMockAdjustedPriceRepository(ctrl *gomock.Controller) *MockAdjustedPriceRepository {
	mock := &MockAdjustedPriceRepository{ctrl: ctrl}
	mock.recorder = &MockAdjustedPriceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdjustedPriceRepository) EXPECT() *MockAdjustedPriceRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAdjustedPriceRepository) Add(arg0 *sql.Tx, arg1 []model.AdjustedPrice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAdjustedPriceRepositoryMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAdjustedPriceRepository)(nil).Add), arg0, arg1)
}

// Get mocks base method.
func (m *MockAdjustedPriceRepository) Get(arg0 string, arg1 time.Time) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAdjustedPriceRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAdjustedPriceRepository)(nil).Get), arg0, arg1)
}

// GetMany mocks base method.
func (m *MockAdjustedPriceRepository) GetMany(arg0 []repository.GetManyInput) ([]domain.AssetPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", arg0)
	ret0, _ := ret[0].([]domain.AssetPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockAdjustedPriceRepositoryMockRecorder) GetMany(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockAdjustedPriceRepository)(nil).GetMany), arg0)
}

// GetManyOnDay mocks base method.
func (m *MockAdjustedPriceRepository) GetManyOnDay(arg0 []string, arg1 time.Time) (map[string]decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyOnDay", arg0, arg1)
	ret0, _ := ret[0].(map[string]decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyOnDay indicates an expected call of GetManyOnDay.
func (mr *MockAdjustedPriceRepositoryMockRecorder) GetManyOnDay(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyOnDay", reflect.TypeOf((*MockAdjustedPriceRepository)(nil).GetManyOnDay), arg0, arg1)
}

// LatestPrices mocks base method.
func (m *MockAdjustedPriceRepository) LatestPrices(symbols []string) ([]domain.AssetPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestPrices", symbols)
	ret0, _ := ret[0].([]domain.AssetPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestPrices indicates an expected call of LatestPrices.
func (mr *MockAdjustedPriceRepositoryMockRecorder) LatestPrices(symbols any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestPrices", reflect.TypeOf((*MockAdjustedPriceRepository)(nil).LatestPrices), symbols)
}

// LatestTradingDay mocks base method.
func (m *MockAdjustedPriceRepository) LatestTradingDay() (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestTradingDay")
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestTradingDay indicates an expected call of LatestTradingDay.
func (mr *MockAdjustedPriceRepositoryMockRecorder) LatestTradingDay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestTradingDay", reflect.TypeOf((*MockAdjustedPriceRepository)(nil).LatestTradingDay))
}

// List mocks base method.
func (m *MockAdjustedPriceRepository) List(symbols []string, start, end time.Time) ([]domain.AssetPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", symbols, start, end)
	ret0, _ := ret[0].([]domain.AssetPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAdjustedPriceRepositoryMockRecorder) List(symbols, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAdjustedPriceRepository)(nil).List), symbols, start, end)
}

// ListTradingDays mocks base method.
func (m *MockAdjustedPriceRepository) ListTradingDays(start, end time.Time) ([]time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTradingDays", start, end)
	ret0, _ := ret[0].([]time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTradingDays indicates an expected call of ListTradingDays.
func (mr *MockAdjustedPriceRepositoryMockRecorder) ListTradingDays(start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTradingDays", reflect.TypeOf((*MockAdjustedPriceRepository)(nil).ListTradingDays), start, end)
}
