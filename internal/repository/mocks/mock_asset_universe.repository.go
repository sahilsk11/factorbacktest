// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/asset_universe.repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	sql "database/sql"
	model "factorbacktest/internal/db/models/postgres/public/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAssetUniverseRepository is a mock of AssetUniverseRepository interface.
type MockAssetUniverseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAssetUniverseRepositoryMockRecorder
}

// MockAssetUniverseRepositoryMockRecorder is the mock recorder for MockAssetUniverseRepository.
type MockAssetUniverseRepositoryMockRecorder struct {
	mock *MockAssetUniverseRepository
}

// NewMockAssetUniverseRepository creates a new mock instance.
func NewMockAssetUniverseRepository(ctrl *gomock.Controller) *MockAssetUniverseRepository {
	mock := &MockAssetUniverseRepository{ctrl: ctrl}
	mock.recorder = &MockAssetUniverseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetUniverseRepository) EXPECT() *MockAssetUniverseRepositoryMockRecorder {
	return m.recorder
}

// AddAssets mocks base method.
func (m *MockAssetUniverseRepository) AddAssets(tx *sql.Tx, universe model.AssetUniverse, tickers []model.Ticker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAssets", tx, universe, tickers)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAssets indicates an expected call of AddAssets.
func (mr *MockAssetUniverseRepositoryMockRecorder) AddAssets(tx, universe, tickers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAssets", reflect.TypeOf((*MockAssetUniverseRepository)(nil).AddAssets), tx, universe, tickers)
}

// GetAssetUniverses mocks base method.
func (m *MockAssetUniverseRepository) GetAssetUniverses() ([]model.AssetUniverseSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetUniverses")
	ret0, _ := ret[0].([]model.AssetUniverseSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetUniverses indicates an expected call of GetAssetUniverses.
func (mr *MockAssetUniverseRepositoryMockRecorder) GetAssetUniverses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetUniverses", reflect.TypeOf((*MockAssetUniverseRepository)(nil).GetAssetUniverses))
}

// GetAssets mocks base method.
func (m *MockAssetUniverseRepository) GetAssets(assetUniverseName string) ([]model.Ticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssets", assetUniverseName)
	ret0, _ := ret[0].([]model.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssets indicates an expected call of GetAssets.
func (mr *MockAssetUniverseRepositoryMockRecorder) GetAssets(assetUniverseName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssets", reflect.TypeOf((*MockAssetUniverseRepository)(nil).GetAssets), assetUniverseName)
}

// GetOrCreate mocks base method.
func (m *MockAssetUniverseRepository) GetOrCreate(tx *sql.Tx, name string) (*model.AssetUniverse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreate", tx, name)
	ret0, _ := ret[0].(*model.AssetUniverse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreate indicates an expected call of GetOrCreate.
func (mr *MockAssetUniverseRepositoryMockRecorder) GetOrCreate(tx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreate", reflect.TypeOf((*MockAssetUniverseRepository)(nil).GetOrCreate), tx, name)
}
