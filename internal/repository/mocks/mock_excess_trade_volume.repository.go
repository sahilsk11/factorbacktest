// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/excess_trade_volume.repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/excess_trade_volume.repository.go -destination=internal/repository/mocks/mock_excess_trade_volume.repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	sql "database/sql"
	model "factorbacktest/internal/db/models/postgres/public/model"
	reflect "reflect"

	postgres "github.com/go-jet/jet/v2/postgres"
	uuid "github.com/google/uuid"
	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockExcessTradeVolumeRepository is a mock of ExcessTradeVolumeRepository interface.
type MockExcessTradeVolumeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExcessTradeVolumeRepositoryMockRecorder
}

// MockExcessTradeVolumeRepositoryMockRecorder is the mock recorder for MockExcessTradeVolumeRepository.
type MockExcessTradeVolumeRepositoryMockRecorder struct {
	mock *MockExcessTradeVolumeRepository
}

// NewMockExcessTradeVolumeRepository creates a new mock instance.
func NewMockExcessTradeVolumeRepository(ctrl *gomock.Controller) *MockExcessTradeVolumeRepository {
	mock := &MockExcessTradeVolumeRepository{ctrl: ctrl}
	mock.recorder = &MockExcessTradeVolumeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExcessTradeVolumeRepository) EXPECT() *MockExcessTradeVolumeRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m_2 *MockExcessTradeVolumeRepository) Add(tx *sql.Tx, m model.ExcessTradeVolume) (*model.ExcessTradeVolume, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Add", tx, m)
	ret0, _ := ret[0].(*model.ExcessTradeVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockExcessTradeVolumeRepositoryMockRecorder) Add(tx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockExcessTradeVolumeRepository)(nil).Add), tx, m)
}

// ListByTickerID mocks base method.
func (m *MockExcessTradeVolumeRepository) ListByTickerID(tx *sql.Tx) (map[uuid.UUID]decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTickerID", tx)
	ret0, _ := ret[0].(map[uuid.UUID]decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByTickerID indicates an expected call of ListByTickerID.
func (mr *MockExcessTradeVolumeRepositoryMockRecorder) ListByTickerID(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTickerID", reflect.TypeOf((*MockExcessTradeVolumeRepository)(nil).ListByTickerID), tx)
}

// Update mocks base method.
func (m_2 *MockExcessTradeVolumeRepository) Update(tx *sql.Tx, m model.ExcessTradeVolume, columns postgres.ColumnList) (*model.ExcessTradeVolume, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", tx, m, columns)
	ret0, _ := ret[0].(*model.ExcessTradeVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockExcessTradeVolumeRepositoryMockRecorder) Update(tx, m, columns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExcessTradeVolumeRepository)(nil).Update), tx, m, columns)
}
