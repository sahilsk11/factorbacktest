// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/investment_holdings_version.repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/investment_holdings_version.repository.go -destination=internal/repository/mocks/mock_investment_holdings_version.repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	sql "database/sql"
	model "factorbacktest/internal/db/models/postgres/public/model"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockInvestmentHoldingsVersionRepository is a mock of InvestmentHoldingsVersionRepository interface.
type MockInvestmentHoldingsVersionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvestmentHoldingsVersionRepositoryMockRecorder
}

// MockInvestmentHoldingsVersionRepositoryMockRecorder is the mock recorder for MockInvestmentHoldingsVersionRepository.
type MockInvestmentHoldingsVersionRepositoryMockRecorder struct {
	mock *MockInvestmentHoldingsVersionRepository
}

// NewMockInvestmentHoldingsVersionRepository creates a new mock instance.
func NewMockInvestmentHoldingsVersionRepository(ctrl *gomock.Controller) *MockInvestmentHoldingsVersionRepository {
	mock := &MockInvestmentHoldingsVersionRepository{ctrl: ctrl}
	mock.recorder = &MockInvestmentHoldingsVersionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvestmentHoldingsVersionRepository) EXPECT() *MockInvestmentHoldingsVersionRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockInvestmentHoldingsVersionRepository) Add(tx *sql.Tx, ihv model.InvestmentHoldingsVersion) (*model.InvestmentHoldingsVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tx, ihv)
	ret0, _ := ret[0].(*model.InvestmentHoldingsVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockInvestmentHoldingsVersionRepositoryMockRecorder) Add(tx, ihv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockInvestmentHoldingsVersionRepository)(nil).Add), tx, ihv)
}

// Get mocks base method.
func (m *MockInvestmentHoldingsVersionRepository) Get(id uuid.UUID) (*model.InvestmentHoldingsVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.InvestmentHoldingsVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInvestmentHoldingsVersionRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInvestmentHoldingsVersionRepository)(nil).Get), id)
}

// GetEarliestVersionID mocks base method.
func (m *MockInvestmentHoldingsVersionRepository) GetEarliestVersionID(investmentID uuid.UUID) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarliestVersionID", investmentID)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEarliestVersionID indicates an expected call of GetEarliestVersionID.
func (mr *MockInvestmentHoldingsVersionRepositoryMockRecorder) GetEarliestVersionID(investmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarliestVersionID", reflect.TypeOf((*MockInvestmentHoldingsVersionRepository)(nil).GetEarliestVersionID), investmentID)
}

// GetLatestVersionID mocks base method.
func (m *MockInvestmentHoldingsVersionRepository) GetLatestVersionID(investmentID uuid.UUID) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestVersionID", investmentID)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestVersionID indicates an expected call of GetLatestVersionID.
func (mr *MockInvestmentHoldingsVersionRepositoryMockRecorder) GetLatestVersionID(investmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestVersionID", reflect.TypeOf((*MockInvestmentHoldingsVersionRepository)(nil).GetLatestVersionID), investmentID)
}

// List mocks base method.
func (m *MockInvestmentHoldingsVersionRepository) List() ([]model.InvestmentHoldingsVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]model.InvestmentHoldingsVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInvestmentHoldingsVersionRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInvestmentHoldingsVersionRepository)(nil).List))
}
