// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/investment_trade.repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/investment_trade.repository.go -destination=internal/repository/mocks/mock_investment_trade.repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	sql "database/sql"
	model "factorbacktest/internal/db/models/postgres/public/model"
	repository "factorbacktest/internal/repository"
	reflect "reflect"

	postgres "github.com/go-jet/jet/v2/postgres"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockInvestmentTradeRepository is a mock of InvestmentTradeRepository interface.
type MockInvestmentTradeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvestmentTradeRepositoryMockRecorder
}

// MockInvestmentTradeRepositoryMockRecorder is the mock recorder for MockInvestmentTradeRepository.
type MockInvestmentTradeRepositoryMockRecorder struct {
	mock *MockInvestmentTradeRepository
}

// NewMockInvestmentTradeRepository creates a new mock instance.
func NewMockInvestmentTradeRepository(ctrl *gomock.Controller) *MockInvestmentTradeRepository {
	mock := &MockInvestmentTradeRepository{ctrl: ctrl}
	mock.recorder = &MockInvestmentTradeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvestmentTradeRepository) EXPECT() *MockInvestmentTradeRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockInvestmentTradeRepository) Add(tx *sql.Tx, irt model.InvestmentTrade) (*model.InvestmentTrade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tx, irt)
	ret0, _ := ret[0].(*model.InvestmentTrade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockInvestmentTradeRepositoryMockRecorder) Add(tx, irt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockInvestmentTradeRepository)(nil).Add), tx, irt)
}

// AddMany mocks base method.
func (m_2 *MockInvestmentTradeRepository) AddMany(tx *sql.Tx, m []*model.InvestmentTrade) ([]model.InvestmentTrade, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "AddMany", tx, m)
	ret0, _ := ret[0].([]model.InvestmentTrade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMany indicates an expected call of AddMany.
func (mr *MockInvestmentTradeRepositoryMockRecorder) AddMany(tx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMany", reflect.TypeOf((*MockInvestmentTradeRepository)(nil).AddMany), tx, m)
}

// Get mocks base method.
func (m *MockInvestmentTradeRepository) Get(id uuid.UUID) (*model.InvestmentTrade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.InvestmentTrade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInvestmentTradeRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInvestmentTradeRepository)(nil).Get), id)
}

// List mocks base method.
func (m *MockInvestmentTradeRepository) List(tx *sql.Tx, filter repository.InvestmentTradeListFilter) ([]model.InvestmentTradeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tx, filter)
	ret0, _ := ret[0].([]model.InvestmentTradeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInvestmentTradeRepositoryMockRecorder) List(tx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInvestmentTradeRepository)(nil).List), tx, filter)
}

// Update mocks base method.
func (m_2 *MockInvestmentTradeRepository) Update(tx *sql.Tx, m model.InvestmentTrade, columns postgres.ColumnList) (*model.InvestmentTrade, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", tx, m, columns)
	ret0, _ := ret[0].(*model.InvestmentTrade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockInvestmentTradeRepositoryMockRecorder) Update(tx, m, columns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInvestmentTradeRepository)(nil).Update), tx, m, columns)
}
