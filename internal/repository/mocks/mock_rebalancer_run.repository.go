// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/rebalancer_run.repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/rebalancer_run.repository.go -destination=internal/repository/mocks/mock_rebalancer_run.repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	sql "database/sql"
	model "factorbacktest/internal/db/models/postgres/public/model"
	reflect "reflect"

	postgres "github.com/go-jet/jet/v2/postgres"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRebalancerRunRepository is a mock of RebalancerRunRepository interface.
type MockRebalancerRunRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRebalancerRunRepositoryMockRecorder
}

// MockRebalancerRunRepositoryMockRecorder is the mock recorder for MockRebalancerRunRepository.
type MockRebalancerRunRepositoryMockRecorder struct {
	mock *MockRebalancerRunRepository
}

// NewMockRebalancerRunRepository creates a new mock instance.
func NewMockRebalancerRunRepository(ctrl *gomock.Controller) *MockRebalancerRunRepository {
	mock := &MockRebalancerRunRepository{ctrl: ctrl}
	mock.recorder = &MockRebalancerRunRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRebalancerRunRepository) EXPECT() *MockRebalancerRunRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRebalancerRunRepository) Add(tx *sql.Tx, rr model.RebalancerRun) (*model.RebalancerRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tx, rr)
	ret0, _ := ret[0].(*model.RebalancerRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockRebalancerRunRepositoryMockRecorder) Add(tx, rr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRebalancerRunRepository)(nil).Add), tx, rr)
}

// Get mocks base method.
func (m *MockRebalancerRunRepository) Get(id uuid.UUID) (*model.RebalancerRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.RebalancerRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRebalancerRunRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRebalancerRunRepository)(nil).Get), id)
}

// List mocks base method.
func (m *MockRebalancerRunRepository) List() ([]model.RebalancerRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]model.RebalancerRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRebalancerRunRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRebalancerRunRepository)(nil).List))
}

// Update mocks base method.
func (m *MockRebalancerRunRepository) Update(tx *sql.Tx, rr *model.RebalancerRun, columns postgres.ColumnList) (*model.RebalancerRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tx, rr, columns)
	ret0, _ := ret[0].(*model.RebalancerRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRebalancerRunRepositoryMockRecorder) Update(tx, rr, columns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRebalancerRunRepository)(nil).Update), tx, rr, columns)
}
