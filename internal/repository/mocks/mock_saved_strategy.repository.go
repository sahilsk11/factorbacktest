// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/saved_strategy.repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/saved_strategy.repository.go -destination=internal/repository/mocks/mock_saved_strategy.repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "factorbacktest/internal/db/models/postgres/public/model"
	repository "factorbacktest/internal/repository"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSavedStrategyRepository is a mock of SavedStrategyRepository interface.
type MockSavedStrategyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSavedStrategyRepositoryMockRecorder
}

// MockSavedStrategyRepositoryMockRecorder is the mock recorder for MockSavedStrategyRepository.
type MockSavedStrategyRepositoryMockRecorder struct {
	mock *MockSavedStrategyRepository
}

// NewMockSavedStrategyRepository creates a new mock instance.
func NewMockSavedStrategyRepository(ctrl *gomock.Controller) *MockSavedStrategyRepository {
	mock := &MockSavedStrategyRepository{ctrl: ctrl}
	mock.recorder = &MockSavedStrategyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSavedStrategyRepository) EXPECT() *MockSavedStrategyRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m_2 *MockSavedStrategyRepository) Add(m model.SavedStrategy) (*model.SavedStrategy, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Add", m)
	ret0, _ := ret[0].(*model.SavedStrategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockSavedStrategyRepositoryMockRecorder) Add(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSavedStrategyRepository)(nil).Add), m)
}

// Get mocks base method.
func (m *MockSavedStrategyRepository) Get(arg0 uuid.UUID) (*model.SavedStrategy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*model.SavedStrategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSavedStrategyRepositoryMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSavedStrategyRepository)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockSavedStrategyRepository) List(arg0 repository.SavedStrategyListFilter) ([]model.SavedStrategy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]model.SavedStrategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSavedStrategyRepositoryMockRecorder) List(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSavedStrategyRepository)(nil).List), arg0)
}

// ListMatchingStrategies mocks base method.
func (m_2 *MockSavedStrategyRepository) ListMatchingStrategies(m model.SavedStrategy) ([]model.SavedStrategy, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "ListMatchingStrategies", m)
	ret0, _ := ret[0].([]model.SavedStrategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchingStrategies indicates an expected call of ListMatchingStrategies.
func (mr *MockSavedStrategyRepositoryMockRecorder) ListMatchingStrategies(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingStrategies", reflect.TypeOf((*MockSavedStrategyRepository)(nil).ListMatchingStrategies), m)
}

// SetBookmarked mocks base method.
func (m *MockSavedStrategyRepository) SetBookmarked(savedStrategyID uuid.UUID, bookmarked bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBookmarked", savedStrategyID, bookmarked)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBookmarked indicates an expected call of SetBookmarked.
func (mr *MockSavedStrategyRepositoryMockRecorder) SetBookmarked(savedStrategyID, bookmarked any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBookmarked", reflect.TypeOf((*MockSavedStrategyRepository)(nil).SetBookmarked), savedStrategyID, bookmarked)
}

// UpdateName mocks base method.
func (m *MockSavedStrategyRepository) UpdateName(arg0 uuid.UUID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockSavedStrategyRepositoryMockRecorder) UpdateName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockSavedStrategyRepository)(nil).UpdateName), arg0, arg1)
}
