// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/strategy.repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/strategy.repository.go -destination=internal/repository/mocks/mock_strategy.repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "factorbacktest/internal/db/models/postgres/public/model"
	repository "factorbacktest/internal/repository"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStrategyRepository is a mock of StrategyRepository interface.
type MockStrategyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyRepositoryMockRecorder
}

// MockStrategyRepositoryMockRecorder is the mock recorder for MockStrategyRepository.
type MockStrategyRepositoryMockRecorder struct {
	mock *MockStrategyRepository
}

// NewMockStrategyRepository creates a new mock instance.
func NewMockStrategyRepository(ctrl *gomock.Controller) *MockStrategyRepository {
	mock := &MockStrategyRepository{ctrl: ctrl}
	mock.recorder = &MockStrategyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStrategyRepository) EXPECT() *MockStrategyRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m_2 *MockStrategyRepository) Add(m model.Strategy) (*model.Strategy, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Add", m)
	ret0, _ := ret[0].(*model.Strategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockStrategyRepositoryMockRecorder) Add(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStrategyRepository)(nil).Add), m)
}

// Get mocks base method.
func (m *MockStrategyRepository) Get(arg0 uuid.UUID) (*model.Strategy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*model.Strategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStrategyRepositoryMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStrategyRepository)(nil).Get), arg0)
}

// IsBookmarked mocks base method.
func (m *MockStrategyRepository) IsBookmarked(arg0 model.Strategy) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBookmarked", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBookmarked indicates an expected call of IsBookmarked.
func (mr *MockStrategyRepositoryMockRecorder) IsBookmarked(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBookmarked", reflect.TypeOf((*MockStrategyRepository)(nil).IsBookmarked), arg0)
}

// List mocks base method.
func (m *MockStrategyRepository) List(arg0 repository.StrategyListFilter) ([]model.Strategy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]model.Strategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStrategyRepositoryMockRecorder) List(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStrategyRepository)(nil).List), arg0)
}
