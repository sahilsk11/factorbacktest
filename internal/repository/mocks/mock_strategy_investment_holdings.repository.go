// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/strategy_investment_holdings.repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	sql "database/sql"
	model "factorbacktest/internal/db/models/postgres/public/model"
	domain "factorbacktest/internal/domain"
	repository "factorbacktest/internal/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStrategyInvestmentHoldingsRepository is a mock of StrategyInvestmentHoldingsRepository interface.
type MockStrategyInvestmentHoldingsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyInvestmentHoldingsRepositoryMockRecorder
}

// MockStrategyInvestmentHoldingsRepositoryMockRecorder is the mock recorder for MockStrategyInvestmentHoldingsRepository.
type MockStrategyInvestmentHoldingsRepositoryMockRecorder struct {
	mock *MockStrategyInvestmentHoldingsRepository
}

// NewMockStrategyInvestmentHoldingsRepository creates a new mock instance.
func NewMockStrategyInvestmentHoldingsRepository(ctrl *gomock.Controller) *MockStrategyInvestmentHoldingsRepository {
	mock := &MockStrategyInvestmentHoldingsRepository{ctrl: ctrl}
	mock.recorder = &MockStrategyInvestmentHoldingsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStrategyInvestmentHoldingsRepository) EXPECT() *MockStrategyInvestmentHoldingsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStrategyInvestmentHoldingsRepository) Add(tx *sql.Tx, sih model.StrategyInvestmentHoldings) (*model.StrategyInvestmentHoldings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tx, sih)
	ret0, _ := ret[0].(*model.StrategyInvestmentHoldings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockStrategyInvestmentHoldingsRepositoryMockRecorder) Add(tx, sih interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStrategyInvestmentHoldingsRepository)(nil).Add), tx, sih)
}

// Get mocks base method.
func (m *MockStrategyInvestmentHoldingsRepository) Get(id uuid.UUID) (*model.StrategyInvestmentHoldings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.StrategyInvestmentHoldings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStrategyInvestmentHoldingsRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStrategyInvestmentHoldingsRepository)(nil).Get), id)
}

// GetLatestHoldings mocks base method.
func (m *MockStrategyInvestmentHoldingsRepository) GetLatestHoldings(savedStrategyID uuid.UUID) (*domain.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestHoldings", savedStrategyID)
	ret0, _ := ret[0].(*domain.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestHoldings indicates an expected call of GetLatestHoldings.
func (mr *MockStrategyInvestmentHoldingsRepositoryMockRecorder) GetLatestHoldings(savedStrategyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestHoldings", reflect.TypeOf((*MockStrategyInvestmentHoldingsRepository)(nil).GetLatestHoldings), savedStrategyID)
}

// List mocks base method.
func (m *MockStrategyInvestmentHoldingsRepository) List(arg0 repository.HoldingsListFilter) ([]model.StrategyInvestmentHoldings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]model.StrategyInvestmentHoldings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStrategyInvestmentHoldingsRepositoryMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStrategyInvestmentHoldingsRepository)(nil).List), arg0)
}
