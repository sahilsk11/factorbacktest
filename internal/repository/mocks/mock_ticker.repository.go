// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/ticker.repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/ticker.repository.go -destination=internal/repository/mocks/mock_ticker.repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	sql "database/sql"
	model "factorbacktest/internal/db/models/postgres/public/model"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTickerRepository is a mock of TickerRepository interface.
type MockTickerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTickerRepositoryMockRecorder
}

// MockTickerRepositoryMockRecorder is the mock recorder for MockTickerRepository.
type MockTickerRepositoryMockRecorder struct {
	mock *MockTickerRepository
}

// NewMockTickerRepository creates a new mock instance.
func NewMockTickerRepository(ctrl *gomock.Controller) *MockTickerRepository {
	mock := &MockTickerRepository{ctrl: ctrl}
	mock.recorder = &MockTickerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTickerRepository) EXPECT() *MockTickerRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTickerRepository) Get(tickerID uuid.UUID) (*model.Ticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tickerID)
	ret0, _ := ret[0].(*model.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTickerRepositoryMockRecorder) Get(tickerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTickerRepository)(nil).Get), tickerID)
}

// GetCashTicker mocks base method.
func (m *MockTickerRepository) GetCashTicker() (*model.Ticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCashTicker")
	ret0, _ := ret[0].(*model.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCashTicker indicates an expected call of GetCashTicker.
func (mr *MockTickerRepositoryMockRecorder) GetCashTicker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCashTicker", reflect.TypeOf((*MockTickerRepository)(nil).GetCashTicker))
}

// GetOrCreate mocks base method.
func (m *MockTickerRepository) GetOrCreate(tx *sql.Tx, t model.Ticker) (*model.Ticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreate", tx, t)
	ret0, _ := ret[0].(*model.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreate indicates an expected call of GetOrCreate.
func (mr *MockTickerRepositoryMockRecorder) GetOrCreate(tx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreate", reflect.TypeOf((*MockTickerRepository)(nil).GetOrCreate), tx, t)
}

// List mocks base method.
func (m *MockTickerRepository) List() ([]model.Ticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]model.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTickerRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTickerRepository)(nil).List))
}
